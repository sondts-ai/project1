import random
import sys

# ==========================
# T·∫†O TH·ªúI GIAN (T2‚ÄìT7, 4 ca/ng√†y)
# ==========================
def tao_thoi_gian():
    tg = []
    for thu in range(2, 8):  # T2 -> T7
        for ca in range(1, 5):  # 4 ca/ng√†y
            tg.append(f"T{thu}-Ca{ca}")
    return tg

# ==========================
# H√ÄM ƒê√ÅNH GI√Å
# ==========================
def tinh_xung_dot(lich, giang_vien, lop_hoc):
    xung_dot = 0
    da_dung = {}

    for mh, (phong, tg) in lich.items():
        gv = giang_vien.get(mh, "Unknown GV")
        lop = lop_hoc.get(mh, "Unknown Lop")

        # Ki·ªÉm tra ph√≤ng h·ªçc tr√πng gi·ªù
        if (phong, tg) in da_dung:
            xung_dot += 1
        else:
            da_dung[(phong, tg)] = mh

        # Ki·ªÉm tra gi·∫£ng vi√™n tr√πng gi·ªù
        if (gv, tg) in da_dung:
            xung_dot += 1
        else:
            da_dung[(gv, tg)] = mh

        # Ki·ªÉm tra l·ªõp tr√πng gi·ªù
        if (lop, tg) in da_dung:
            xung_dot += 1
        else:
            da_dung[(lop, tg)] = mh

    return xung_dot

# ==========================
# T·∫†O L·ªäCH NG·∫™U NHI√äN
# ==========================
def tao_lich_ngau_nhien(mon_hoc, phong_hoc, thoi_gian):
    return {
        mh: (random.choice(phong_hoc), random.choice(thoi_gian))
        for mh in mon_hoc
    }

# ==========================
# T·∫†O L√ÅNG GI·ªÄNG
# ==========================
def tao_lang_gieng(lich, mon_hoc, phong_hoc, thoi_gian):
    new_lich = lich.copy()
    mh = random.choice(mon_hoc)
    new_lich[mh] = (random.choice(phong_hoc), random.choice(thoi_gian))
    return new_lich

# ==========================
# THU·∫¨T TO√ÅN LEO ƒê·ªíI
# ==========================
def hill_climbing(mon_hoc, giang_vien, lop_hoc, phong_hoc, thoi_gian, max_iter=1000):
    lich = tao_lich_ngau_nhien(mon_hoc, phong_hoc, thoi_gian)
    cost = tinh_xung_dot(lich, giang_vien, lop_hoc)

    for _ in range(max_iter):
        neighbor = tao_lang_gieng(lich, mon_hoc, phong_hoc, thoi_gian)
        new_cost = tinh_xung_dot(neighbor, giang_vien, lop_hoc)

        if new_cost < cost:
            lich, cost = neighbor, new_cost

        if cost == 0:
            break

    return lich, cost

# ==========================
# CH·∫†Y ·ªû CONSOLE
# ==========================
def run_console():
    print("üìå Ch·∫°y ch·∫ø ƒë·ªô console\n")

    # Nh·∫≠p m√¥n h·ªçc
    mon_hoc = input("Nh·∫≠p danh s√°ch m√¥n h·ªçc (c√°ch nhau b·ªüi d·∫•u ph·∫©y, m·∫∑c ƒë·ªãnh: AI,DL,CSDL,ML,Python,To√°n r·ªùi r·∫°c): ")
    if not mon_hoc.strip():
        mon_hoc = ["AI", "DL", "CSDL", "ML", "Python", "To√°n r·ªùi r·∫°c"]
    else:
        mon_hoc = [mh.strip() for mh in mon_hoc.split(",")]

    # Nh·∫≠p gi·∫£ng vi√™n
    giang_vien = {}
    for mh in mon_hoc:
        gv = input(f"Nh·∫≠p gi·∫£ng vi√™n cho m√¥n {mh}: ")
        giang_vien[mh] = gv if gv.strip() else f"GV_{mh}"

    # Nh·∫≠p l·ªõp
    lop_hoc = {}
    for mh in mon_hoc:
        lop = input(f"Nh·∫≠p l·ªõp cho m√¥n {mh}: ")
        lop_hoc[mh] = lop if lop.strip() else f"Lop_{mh}"

    # Nh·∫≠p ph√≤ng h·ªçc
    phong_input = input("Nh·∫≠p danh s√°ch ph√≤ng h·ªçc (c√°ch nhau b·ªüi d·∫•u ph·∫©y, m·∫∑c ƒë·ªãnh: P101,P102,P103,P201,P202,P203): ")
    if not phong_input.strip():
        phong_hoc = ["P101", "P102", "P103", "P201", "P202", "P203"]
    else:
        phong_hoc = [p.strip() for p in phong_input.split(",")]

    # Th·ªùi gian
    thoi_gian = tao_thoi_gian()

    # Ch·∫°y hill climbing
    lich, cost = hill_climbing(mon_hoc, giang_vien, lop_hoc, phong_hoc, thoi_gian, max_iter=2000)

    print("\n‚úÖ L·ªãch h·ªçc t·ªëi ∆∞u:")
    for mh, (phong, tg) in lich.items():
        print(f"{mh:<15} | {giang_vien[mh]:<10} | {lop_hoc[mh]:<8} | {phong:<5} | {tg}")

    print(f"\nüîç S·ªë xung ƒë·ªôt: {cost}")
    if cost == 0:
        print("üéâ T√¨m ƒë∆∞·ª£c l·ªãch kh√¥ng xung ƒë·ªôt!")
    else:
        print("‚ö†Ô∏è V·∫´n c√≤n xung ƒë·ªôt, c√≥ th·ªÉ ch·∫°y l·∫°i ho·∫∑c tƒÉng s·ªë l·∫ßn l·∫∑p.")

# ==========================
# MAIN
# ==========================
if __name__ == "__main__":
    if "streamlit" in sys.argv[0]:  # N·∫øu ch·∫°y b·∫±ng streamlit
        import streamlit as st

        st.title("üìÖ X·∫øp l·ªãch h·ªçc - Hill Climbing")

        # Sidebar input
        mon_hoc_input = st.sidebar.text_area("M√¥n h·ªçc", "AI\nDL\nCSDL\nML\nPython\nTo√°n r·ªùi r·∫°c")
        mon_hoc = [mh.strip() for mh in mon_hoc_input.split("\n") if mh.strip()]

        gv_input = st.sidebar.text_area("Gi·∫£ng vi√™n (M√¥n=GV)", 
                                        "AI=Th·∫ßy A\nDL=Th·∫ßy B\nCSDL=C√¥ C\nML=Th·∫ßy D\nPython=C√¥ E\nTo√°n r·ªùi r·∫°c=Th·∫ßy F")
        giang_vien = {mh.strip(): gv.strip() for mh, gv in (line.split("=") for line in gv_input.split("\n") if "=" in line)}

        lop_input = st.sidebar.text_area("L·ªõp (M√¥n=L·ªõp)", 
                                         "AI=CNTT1\nDL=CNTT1\nCSDL=CNTT2\nML=CNTT2\nPython=CNTT3\nTo√°n r·ªùi r·∫°c=CNTT3")
        lop_hoc = {mh.strip(): lop.strip() for mh, lop in (line.split("=") for line in lop_input.split("\n") if "=" in line)}

        phong_hoc_input = st.sidebar.text_area("Ph√≤ng h·ªçc", "P101\nP102\nP103\nP201\nP202\nP203")
        phong_hoc = [p.strip() for p in phong_hoc_input.split("\n") if p.strip()]

        thoi_gian = tao_thoi_gian()

        so_lan = st.slider("S·ªë l·∫ßn l·∫∑p t·ªëi ƒëa", 100, 5000, 1000, 100)
        run_button = st.button("Ch·∫°y thu·∫≠t to√°n")

        if run_button:
            best_schedule, best_cost = hill_climbing(mon_hoc, giang_vien, lop_hoc, phong_hoc, thoi_gian, max_iter=so_lan)
            st.subheader("‚úÖ L·ªãch h·ªçc t·ªëi ∆∞u t√¨m ƒë∆∞·ª£c:")
            st.table([
                {
                    "M√¥n h·ªçc": mh,
                    "Gi·∫£ng vi√™n": giang_vien.get(mh, "Unknown"),
                    "L·ªõp": lop_hoc.get(mh, "Unknown"),
                    "Ph√≤ng": phong,
                    "Th·ªùi gian": tg
                }
                for mh, (phong, tg) in best_schedule.items()
            ])

            st.write(f"### üîç S·ªë xung ƒë·ªôt: {best_cost}")
            if best_cost == 0:
                st.success("üéâ T√¨m ƒë∆∞·ª£c l·ªãch kh√¥ng xung ƒë·ªôt!")
            else:
                st.warning("‚ö†Ô∏è V·∫´n c√≤n xung ƒë·ªôt, c√≥ th·ªÉ ch·∫°y l·∫°i ho·∫∑c tƒÉng s·ªë l·∫ßn l·∫∑p.")
    else:
        run_console()
