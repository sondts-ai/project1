import random
import streamlit as st

# ==========================
# H√ÄM T·∫†O DANH S√ÅCH TH·ªúI GIAN (T2-T7, 4 ca/ng√†y)
# ==========================
def tao_thoi_gian():
    tg = []
    for thu in range(2, 8):  # T2 -> T7
        for ca in range(1, 5):  # 4 ca m·ªói ng√†y
            tg.append(f"T{thu}-Ca{ca}")
    return tg

# ==========================
# STREAMLIT UI
# ==========================
st.title("üìÖ X·∫øp l·ªãch h·ªçc - Khoa CNTT (Hill Climbing)")

st.sidebar.header("Nh·∫≠p d·ªØ li·ªáu ƒë·∫ßu v√†o")

# Nh·∫≠p m√¥n h·ªçc
mon_hoc_input = st.sidebar.text_area("Danh s√°ch m√¥n h·ªçc (m·ªói m√¥n 1 d√≤ng)", 
                                     "AI\nDL\nCSDL\nML\nPython\nTo√°n r·ªùi r·∫°c")
mon_hoc = [mh.strip() for mh in mon_hoc_input.split("\n") if mh.strip()]

# Nh·∫≠p gi·∫£ng vi√™n (d·∫°ng: M√¥n=GV)
gv_input = st.sidebar.text_area("Danh s√°ch gi·∫£ng vi√™n (M√¥n=GV, m·ªói d√≤ng 1 c·∫∑p)", 
                                "AI=Th·∫ßy A\nDL=Th·∫ßy B\nCSDL=C√¥ C\nML=Th·∫ßy D\nPython=C√¥ E\nTo√°n r·ªùi r·∫°c=Th·∫ßy F")
giang_vien = {}
for line in gv_input.split("\n"):
    if "=" in line:
        mh, gv = line.split("=", 1)
        giang_vien[mh.strip()] = gv.strip()

# Nh·∫≠p l·ªõp (d·∫°ng: M√¥n=L·ªõp)
lop_input = st.sidebar.text_area("Danh s√°ch l·ªõp (M√¥n=L·ªõp, m·ªói d√≤ng 1 c·∫∑p)", 
                                 "AI=CNTT1\nDL=CNTT1\nCSDL=CNTT2\nML=CNTT2\nPython=CNTT3\nTo√°n r·ªùi r·∫°c=CNTT3")
lop_hoc = {}
for line in lop_input.split("\n"):
    if "=" in line:
        mh, lop = line.split("=", 1)
        lop_hoc[mh.strip()] = lop.strip()

# Ph√≤ng h·ªçc
phong_hoc_input = st.sidebar.text_area("Danh s√°ch ph√≤ng h·ªçc (m·ªói ph√≤ng 1 d√≤ng)", 
                                       "P101\nP102\nP103\nP201\nP202\nP203")
phong_hoc = [p.strip() for p in phong_hoc_input.split("\n") if p.strip()]

# Th·ªùi gian
thoi_gian = tao_thoi_gian()

# ==========================
# T·∫†O L·ªäCH NG·∫™U NHI√äN
# ==========================
def tao_lich_ngau_nhien():
    return {
        mh: (random.choice(phong_hoc), random.choice(thoi_gian))
        for mh in mon_hoc
    }

# ==========================
# H√ÄM ƒê√ÅNH GI√Å
# ==========================
def tinh_xung_dot(lich):
    xung_dot = 0
    da_dung = {}

    for mh, (phong, tg) in lich.items():
        gv = giang_vien.get(mh, "Unknown GV")
        lop = lop_hoc.get(mh, "Unknown Lop")

        # Ki·ªÉm tra ph√≤ng h·ªçc tr√πng gi·ªù
        if (phong, tg) in da_dung:
            xung_dot += 1
        else:
            da_dung[(phong, tg)] = mh

        # Ki·ªÉm tra gi·∫£ng vi√™n tr√πng gi·ªù
        if (gv, tg) in da_dung:
            xung_dot += 1
        else:
            da_dung[(gv, tg)] = mh

        # Ki·ªÉm tra l·ªõp tr√πng gi·ªù
        if (lop, tg) in da_dung:
            xung_dot += 1
        else:
            da_dung[(lop, tg)] = mh

    return xung_dot

# ==========================
# T·∫†O L√ÅNG GI·ªÄNG
# ==========================
def tao_lang_gieng(lich):
    new_lich = lich.copy()
    mh = random.choice(mon_hoc)
    new_lich[mh] = (random.choice(phong_hoc), random.choice(thoi_gian))
    return new_lich

# ==========================
# THU·∫¨T TO√ÅN LEO ƒê·ªíI NG·∫™U NHI√äN
# ==========================
def hill_climbing(max_iter=1000):
    lich = tao_lich_ngau_nhien()
    cost = tinh_xung_dot(lich)

    for _ in range(max_iter):
        neighbor = tao_lang_gieng(lich)
        new_cost = tinh_xung_dot(neighbor)

        if new_cost < cost:
            lich, cost = neighbor, new_cost

        if cost == 0:  # kh√¥ng c√≤n xung ƒë·ªôt
            break

    return lich, cost

# ==========================
# CH·∫†Y THU·∫¨T TO√ÅN
# ==========================
so_lan = st.slider("S·ªë l·∫ßn l·∫∑p t·ªëi ƒëa", min_value=100, max_value=5000, value=1000, step=100)
run_button = st.button("Ch·∫°y thu·∫≠t to√°n")

if run_button:
    best_schedule, best_cost = hill_climbing(so_lan)
    
    st.subheader("‚úÖ L·ªãch h·ªçc t·ªëi ∆∞u t√¨m ƒë∆∞·ª£c:")
    st.table([
        {
            "M√¥n h·ªçc": mh,
            "Gi·∫£ng vi√™n": giang_vien.get(mh, "Unknown"),
            "L·ªõp": lop_hoc.get(mh, "Unknown"),
            "Ph√≤ng": phong,
            "Th·ªùi gian": tg
        }
        for mh, (phong, tg) in best_schedule.items()
    ])

    st.write(f"### üîç S·ªë xung ƒë·ªôt: {best_cost}")
    if best_cost == 0:
        st.success("üéâ T√¨m ƒë∆∞·ª£c l·ªãch kh√¥ng xung ƒë·ªôt!")
    else:
        st.warning("‚ö†Ô∏è V·∫´n c√≤n xung ƒë·ªôt. B·∫°n c√≥ th·ªÉ ch·∫°y l·∫°i ho·∫∑c tƒÉng s·ªë l·∫ßn l·∫∑p.")
