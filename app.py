import random
import streamlit as st

# ==========================
# D·ªÆ LI·ªÜU GI·∫¢ ƒê·ªäNH
# ==========================
mon_hoc = ["AI", "DL", "CSDL", "ML", "Python", "To√°n r·ªùi r·∫°c"]
giang_vien = {
    "AI": "Th·∫ßy A",
    "DL": "Th·∫ßy B",
    "CSDL": "C√¥ C",
    "ML": "Th·∫ßy D",
    "Python": "C√¥ E",
    "To√°n r·ªùi r·∫°c": "Th·∫ßy F",
}
lop_hoc = {
    "AI": "CNTT1",
    "DL": "CNTT1",
    "CSDL": "CNTT2",
    "ML": "CNTT2",
    "Python": "CNTT3",
    "To√°n r·ªùi r·∫°c": "CNTT3",
}
phong_hoc = ["P101", "P102", "P103","P201","P202","P203"]
thoi_gian = ["T2-S√°ng", "T2-Chi·ªÅu", "T3-S√°ng", "T3-Chi·ªÅu", "T4-S√°ng", "T4-Chi·ªÅu"]

# ==========================
# T·∫†O L·ªäCH NG·∫™U NHI√äN
# ==========================
def tao_lich_ngau_nhien():
    return {
        mh: (random.choice(phong_hoc), random.choice(thoi_gian))
        for mh in mon_hoc
    }

# ==========================
# H√ÄM ƒê√ÅNH GI√Å
# ==========================
def tinh_xung_dot(lich):
    xung_dot = 0
    da_dung = {}

    for mh, (phong, tg) in lich.items():
        gv = giang_vien[mh]
        lop = lop_hoc[mh]

        # Ki·ªÉm tra ph√≤ng h·ªçc tr√πng gi·ªù
        if (phong, tg) in da_dung:
            xung_dot += 1
        else:
            da_dung[(phong, tg)] = mh

        # Ki·ªÉm tra gi·∫£ng vi√™n tr√πng gi·ªù
        if (gv, tg) in da_dung:
            xung_dot += 1
        else:
            da_dung[(gv, tg)] = mh

        # Ki·ªÉm tra l·ªõp tr√πng gi·ªù
        if (lop, tg) in da_dung:
            xung_dot += 1
        else:
            da_dung[(lop, tg)] = mh

    return xung_dot

# ==========================
# T·∫†O L√ÅNG GI·ªÄNG
# ==========================
def tao_lang_gieng(lich):
    new_lich = lich.copy()
    mh = random.choice(mon_hoc)
    new_lich[mh] = (random.choice(phong_hoc), random.choice(thoi_gian))
    return new_lich

# ==========================
# THU·∫¨T TO√ÅN LEO ƒê·ªíI NG·∫™U NHI√äN
# ==========================
def hill_climbing(max_iter=1000):
    lich = tao_lich_ngau_nhien()
    cost = tinh_xung_dot(lich)

    for _ in range(max_iter):
        neighbor = tao_lang_gieng(lich)
        new_cost = tinh_xung_dot(neighbor)

        if new_cost < cost:
            lich, cost = neighbor, new_cost

        if cost == 0:  # kh√¥ng c√≤n xung ƒë·ªôt
            break

    return lich, cost

# ==========================
# STREAMLIT UI
# ==========================
st.title("üìÖ X·∫øp l·ªãch h·ªçc - Khoa CNTT (Hill Climbing)")

so_lan = st.slider("S·ªë l·∫ßn l·∫∑p t·ªëi ƒëa", min_value=100, max_value=5000, value=1000, step=100)
run_button = st.button("Ch·∫°y thu·∫≠t to√°n")

if run_button:
    best_schedule, best_cost = hill_climbing(so_lan)
    
    st.subheader("‚úÖ L·ªãch h·ªçc t·ªëi ∆∞u t√¨m ƒë∆∞·ª£c:")
    st.table([
        {
            "M√¥n h·ªçc": mh,
            "Gi·∫£ng vi√™n": giang_vien[mh],
            "L·ªõp": lop_hoc[mh],
            "Ph√≤ng": phong,
            "Th·ªùi gian": tg
        }
        for mh, (phong, tg) in best_schedule.items()
    ])

    st.write(f"### üîç S·ªë xung ƒë·ªôt: {best_cost}")
    if best_cost == 0:
        st.success("üéâ T√¨m ƒë∆∞·ª£c l·ªãch kh√¥ng xung ƒë·ªôt!")
    else:
        st.warning("‚ö†Ô∏è V·∫´n c√≤n xung ƒë·ªôt. B·∫°n c√≥ th·ªÉ ch·∫°y l·∫°i ho·∫∑c tƒÉng s·ªë l·∫ßn l·∫∑p.")
